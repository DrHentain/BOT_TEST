#—Ä–∞–±–æ—á–∏–π –±–æ—Ç
import telebot
from telebot import types
from config import API_TOKEN, CHAT_ID #–î–æ–ª–∂–Ω—ã –±–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ

IT_DEPARTAMENT_TOKEN = ''
bot = telebot.TeleBot(API_TOKEN)

waiting_for_message = {}
sogl_type = {}
selected_approvers = {}
approver_statuses = {}
approval_status = {}
initiators_messages = {}

approval_messages = {}

MAIN_BUTTON = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"
SOGL_TECH = "üõ†Ô∏è –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏"
SOGL_NET_FOLDER = "üìÅ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –∫ —Å–µ—Ç–µ–≤–æ–π –ø–∞–ø–∫–µ"
SOGL_ECP = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –∫ –≠–¶–ü"
BUTTON_BACK = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
BUTTON_DONE = "–ì–æ—Ç–æ–≤–æ"
BUTTON_START_WORK = "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã"
Web_Prilojenie = '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
Web_app_open = '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'

# –ù–∞—à–∏ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç—ã
employees = ["–ò–≤–∞–Ω–æ–≤", "–ì–∞–¥–∂–∏–Ω", "–¢–æ—Ä–æ–≥–æ–≤", "–ü–∞–Ω–æ–≤"]

# ID —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
employee_ids = {"–ò–≤–∞–Ω–æ–≤": 1076447694, "–ì–∞–¥–∂–∏–Ω": 1912799360, "–ü–∞–Ω–æ–≤": 797809533}

def generate_status_message(sogl, statuses):
    status_lines = [f"{approver} - {status}" for approver, status in statuses.items()]
    return f"–í–∞—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: '{sogl}'.\n–°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤:\n{'\n'.join(status_lines)}"

def create_approval_buttons():
    markup = types.InlineKeyboardMarkup()
    approve_button = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ ‚úÖ", callback_data="approved")
    reject_button = types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data="rejected")
    markup.add(approve_button, reject_button)
    return markup

def update_approvers_keyboard(chat_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–ª–æ–≤–∞—Ä—å
    if chat_id not in selected_approvers:
        selected_approvers[chat_id] = []

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for employee in employees:
        if employee in selected_approvers.get(chat_id, []):
            markup.add(f"{employee} ‚úÖ")
        else:
            markup.add(employee)
    markup.add(BUTTON_DONE, BUTTON_BACK)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è):", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(MAIN_BUTTON)
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å")
def handle_approval_request(message):
    global initiators_messages  # –†–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    chat_id = message.chat.id
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    sogl = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞"
    approvers = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤']  # –§–µ–π–∫–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
    approval_status[chat_id] = {approver: "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è" for approver in approvers}
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
    approvers_status_list = "\n".join([f"{approver}: {approval_status[chat_id][approver]}" for approver in approvers])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    sent_message = bot.send_message(
        chat_id, f"–í–∞—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: '{sogl}'.\n–°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤:\n{approvers_status_list}"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    initiators_messages[chat_id] = {
        'message_id': sent_message.message_id
    }
    bot.send_message(chat_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ!")
@bot.message_handler(content_types=['text'])
def handler(message):
    chat_id = message.chat.id
    if message.text == MAIN_BUTTON:
        waiting_for_message[chat_id] = True
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(SOGL_TECH, SOGL_NET_FOLDER, SOGL_ECP)
        markup.row(BUTTON_BACK)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                         reply_markup=markup)
    elif message.text == Web_Prilojenie:
        markup = types.InlineKeyboardMarkup()
        web_app_button = types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",url="https://chatgptchatapp.com/" )
        markup.add(web_app_button)
        bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", reply_markup=markup)
    elif message.text == SOGL_TECH:
        waiting_for_message[chat_id] = True
        sogl_type[chat_id] = SOGL_TECH
        selected_approvers[chat_id] = []
        update_approvers_keyboard(chat_id)
    elif message.text == SOGL_NET_FOLDER:
        waiting_for_message[chat_id] = True
        sogl_type[chat_id] = SOGL_NET_FOLDER
        selected_approvers[chat_id] = []
        update_approvers_keyboard(chat_id)
    elif message.text == SOGL_ECP:
        waiting_for_message[chat_id] = True
        sogl_type[chat_id] = SOGL_ECP
        selected_approvers[chat_id] = []
        update_approvers_keyboard(chat_id)
    elif message.text in [employee + " ‚úÖ" for employee in employees]:
        employee_name = message.text.replace(" ‚úÖ", "")
        if chat_id in sogl_type:
            if employee_name in selected_approvers.get(chat_id, []):
                selected_approvers[chat_id].remove(employee_name)
                bot.send_message(chat_id, f"{employee_name} ‚ùå —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.")
            else:
                selected_approvers[chat_id].append(employee_name)
                bot.send_message(chat_id, f"{employee_name} ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.")
            update_approvers_keyboard(chat_id)
    elif message.text in employees:
        if chat_id in sogl_type:
            selected_approvers[chat_id].append(message.text)
            bot.send_message(chat_id, f"{message.text} ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.")
            update_approvers_keyboard(chat_id)

    elif message.text == BUTTON_DONE:
        if chat_id in selected_approvers and selected_approvers[chat_id]:
            sogl = sogl_type.get(chat_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
            approval_status[chat_id] = {approver: "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è" for approver in selected_approvers[chat_id]}
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤
            approvers_status_list = '\n'.join(
                [f"{approver}: {approval_status[chat_id][approver]}" for approver in selected_approvers[chat_id]])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sent_message = bot.send_message(
                chat_id,
                f"–í–∞—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: '{sogl}'.\n–°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤:\n{approvers_status_list}"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
            if chat_id not in initiators_messages:
                initiators_messages[chat_id] = {}
            initiators_messages[chat_id]['message_id'] = sent_message.message_id
            bot.send_message(chat_id, '–í–∞—à –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–∞–º. –°–ø–∞—Å–∏–±–æ!')
            # –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for approver in selected_approvers[chat_id]:
                if approver in employee_ids:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–∞
                    approver_id = employee_ids[approver]
                    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                    markup = types.InlineKeyboardMarkup()
                    approve_button = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ ‚úÖ",
                                                                callback_data=f"approve:{chat_id}:{approver}")
                    reject_button = types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå",
                                                               callback_data=f"reject:{chat_id}:{approver}")
                    markup.add(approve_button, reject_button)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç—É
                    bot.send_message(
                        approver_id,
                        f"–í–∞–º –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç "
                        f"{message.chat.first_name} @{message.chat.username}\n\n–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: '{sogl}'",
                        reply_markup=markup
                    )
        else:
            bot.send_message(chat_id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.")
    elif message.text == BUTTON_BACK:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(MAIN_BUTTON)
        markup.row(Web_Prilojenie)
        bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == BUTTON_DONE)
def handle_done(message):
    chat_id = message.chat.id
    selected = selected_approvers.get(chat_id, [])
    if not selected:
        bot.send_message(chat_id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.")
        return

    approval_status[chat_id] = {approver: "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è" for approver in selected}
    for approver in selected:
        if approver in employee_ids:
            approver_id = employee_ids[approver]
            bot.send_message(
                approver_id,
                f"–í–∞–º –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.first_name}.",
                reply_markup=create_approval_buttons()
            )

    status_message = generate_status_message("–í–∞—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", approval_status[chat_id])
    bot.send_message(chat_id, f"–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n\n{status_message}")
    bot.send_message(chat_id, "–ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤.", reply_markup=types.ReplyKeyboardRemove())


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve") or call.data.startswith("reject"))
def handle_approval_decision(call):
    global initiators_messages  # –†–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    # –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = call.data.split(":")
    action = data[0]  # approve/reject
    initiator_chat_id = int(data[1])  # ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    approver_name = data[2]  # –ò–º—è —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–∞
    new_status = "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"\
        if action == "approve"\
        else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    approval_status[initiator_chat_id][approver_name] = new_status

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_message = "\n".join([
        f"{name}: {status}" for name, status in approval_status[initiator_chat_id].items()
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if initiator_chat_id in initiators_messages:
        bot.edit_message_text(
            chat_id=initiator_chat_id,
            message_id=initiators_messages[initiator_chat_id]['message_id'],
            text=f"–í–∞—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞'.\n–°—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–∞–Ω—Ç–æ–≤:\n{status_message}")

if __name__ == '__main__':
   bot.polling(none_stop=True)